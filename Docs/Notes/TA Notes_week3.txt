1. 
try to make a microservice on your branch
no GUI
you need a pipeline with tests -> there should be a structure in template but you should add what's necessary
everyone writes a report, codes, is part of every assignment etc. - equal distribution


1st part decide on domain, how to split up microservices - make some diagrams <- should be done before we start coding
2nd part is about design patterns
REC: start 1st task soon, if it's done send it, get feedback, start coding. Friday deadline next week is final.

add some real logic to microservices so it makes sense, add some constraints!

unit testing for sure, add integration test (mocking), and at some point mutation testing (some assignment), adding more tasting:
at the end good amount of coverage (at least 70%). Third assignment focused specifically on testing.

branches, merge requests, review each other code, sprints
brightspace: sprint retrospective sheet, sprint recommended length 1 week

Restriants:
- if you create a new node, this power is for that faculty of the adder
- if admin adds a node: split between all faculties
- system and faculty admin can add nodes but not schedule them
- edge cases (for example user in 2 faculties) up to us

















